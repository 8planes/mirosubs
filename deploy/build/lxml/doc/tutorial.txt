=======================
The lxml.etree Tutorial
=======================
 
.. meta::
  :description: The lxml tutorial on XML that feels like Python
  :keywords: lxml, etree, tutorial, ElementTree, Python, XML, HTML

:Author:
  Stefan Behnel

This tutorial briefly overviews the main concepts of the `ElementTree API`_ as
implemented by ``lxml.etree``, and some simple enhancements that make your
life as a programmer easier.

For a complete reference of the API, see the `generated API
documentation`_.

.. _`ElementTree API`: http://effbot.org/zone/element-index.htm#documentation
.. _`generated API documentation`: api/index.html

.. contents::
.. 
   1  The Element class
     1.1  Elements are lists
     1.2  Elements carry attributes
     1.3  Elements contain text
     1.4  Using XPath to find text
     1.5  Tree iteration
     1.6  Serialisation
   2  The ElementTree class
   3  Parsing from strings and files
     3.1  The fromstring() function
     3.2  The XML() function
     3.3  The parse() function
     3.4  Parser objects
     3.5  Incremental parsing
     3.6  Event-driven parsing
   4  Namespaces
   5  The E-factory
   6  ElementPath


..
  >>> try: from StringIO import StringIO
  ... except ImportError:
  ...    from io import BytesIO
  ...    def StringIO(s):
  ...        if isinstance(s, str): s = s.encode("UTF-8")
  ...        return BytesIO(s)

  >>> try: unicode = __builtins__["unicode"]
  ... except (NameError, KeyError): unicode = str

  >>> try: basestring = __builtins__["basestring"]
  ... except (NameError, KeyError): basestring = str


A common way to import ``lxml.etree`` is as follows:

.. sourcecode:: pycon

    >>> from lxml import etree

If your code only uses the ElementTree API and does not rely on any
functionality that is specific to ``lxml.etree``, you can also use (any part
of) the following import chain as a fall-back to the original ElementTree:

.. sourcecode:: python

    try:
      from lxml import etree
      print("running with lxml.etree")
    except ImportError:
      try:
        # Python 2.5
        import xml.etree.cElementTree as etree
        print("running with cElementTree on Python 2.5+")
      except ImportError:
        try:
          # Python 2.5
          import xml.etree.ElementTree as etree
          print("running with ElementTree on Python 2.5+")
        except ImportError:
          try:
            # normal cElementTree install
            import cElementTree as etree
            print("running with cElementTree")
          except ImportError:
            try:
              # normal ElementTree install
              import elementtree.ElementTree as etree
              print("running with ElementTree")
            except ImportError:
              print("Failed to import ElementTree from any known place")

To aid in writing portable code, this tutorial makes it clear in the examples
which part of the presented API is an extension of lxml.etree over the
original `ElementTree API`_, as defined by Fredrik Lundh's `ElementTree
library`_.

.. _`ElementTree library`: http://effbot.org/zone/element-index.htm

..
  >>> import sys
  >>> from lxml import etree as _etree
  >>> if sys.version_info[0] >= 3:
  ...   class etree_mock(object):
  ...     def __getattr__(self, name): return getattr(_etree, name)
  ...     def tostring(self, *args, **kwargs):
  ...       s = _etree.tostring(*args, **kwargs)
  ...       if isinstance(s, bytes) and bytes([10]) in s: s = s.decode("utf-8") # CR
  ...       if s[-1] == '\n': s = s[:-1]
  ...       return s
  ... else:
  ...   class etree_mock(object):
  ...     def __getattr__(self, name): return getattr(_etree, name)
  ...     def tostring(self, *args, **kwargs):
  ...       s = _etree.tostring(*args, **kwargs)
  ...       if s[-1] == '\n': s = s[:-1]
  ...       return s
  >>> etree = etree_mock()


The Element class
=================

An ``Element`` is the main container object for the ElementTree API.  Most of
the XML tree functionality is accessed through this class.  Elements are
easily created through the ``Element`` factory:

.. sourcecode:: pycon

    >>> root = etree.Element("root")

The XML tag name of elements is accessed through the ``tag`` property:

.. sourcecode:: pycon

    >>> print(root.tag)
    root

Elements are organised in an XML tree structure.  To create child elements and
add them to a parent element, you can use the ``append()`` method:

.. sourcecode:: pycon

    >>> root.append( etree.Element("child1") )

However, this is so common that there is a shorter and much more efficient way
to do this: the ``SubElement`` factory.  It accepts the same arguments as the
``Element`` factory, but additionally requires the parent as first argument:

.. sourcecode:: pycon

    >>> child2 = etree.SubElement(root, "child2")
    >>> child3 = etree.SubElement(root, "child3")

To see that this is really XML, you can serialise the tree you have created:

.. sourcecode:: pycon

    >>> print(etree.tostring(root, pretty_print=True))
    <root>
      <child1/>
      <child2/>
      <child3/>
    </root>


Elements are lists
------------------

To make the access to these subelements as easy and straight forward as
possible, elements behave like normal Python lists:

.. sourcecode:: pycon

    >>> child = root[0]
    >>> print(child.tag)
    child1

    >>> print(len(root))
    3

    >>> root.index(root[1]) # lxml.etree only!
    1

    >>> children = list(root)

    >>> for child in root:
    ...     print(child.tag)
    child1
    child2
    child3

    >>> root.insert(0, etree.Element("child0"))
    >>> start = root[:1]
    >>> end   = root[-1:]

    >>> print(start[0].tag)
    child0
    >>> print(end[0].tag)
    child3

    >>> root[0] = root[-1] # this moves the element!
    >>> for child in root:
    ...     print(child.tag)
    child3
    child1
    child2

Prior to ElementTree 1.3 and lxml 2.0, you could also check the truth value of
an Element to see if it has children, i.e. if the list of children is empty.
This is no longer supported as people tend to find it surprising that a
non-None reference to an existing Element can evaluate to False.  Instead, use
``len(element)``, which is both more explicit and less error prone.

Note in the examples that the last element was *moved* to a different position
in the last example.  This is a difference from the original ElementTree (and
from lists), where elements can sit in multiple positions of any number of
trees.  In lxml.etree, elements can only sit in one position of one tree at a
time.

If you want to *copy* an element to a different position, consider creating an
independent *deep copy* using the ``copy`` module from Python's standard
library:

.. sourcecode:: pycon

    >>> from copy import deepcopy

    >>> element = etree.Element("neu")
    >>> element.append( deepcopy(root[1]) )

    >>> print(element[0].tag)
    child1
    >>> print([ c.tag for c in root ])
    ['child3', 'child1', 'child2']

The way up in the tree is provided through the ``getparent()`` method:

.. sourcecode:: pycon

    >>> root is root[0].getparent()  # lxml.etree only!
    True

The siblings (or neighbours) of an element are accessed as next and previous
elements:

.. sourcecode:: pycon

    >>> root[0] is root[1].getprevious() # lxml.etree only!
    True
    >>> root[1] is root[0].getnext() # lxml.etree only!
    True


Elements carry attributes
-------------------------

XML elements support attributes.  You can create them directly in the Element
factory:

.. sourcecode:: pycon

    >>> root = etree.Element("root", interesting="totally")
    >>> etree.tostring(root)
    b'<root interesting="totally"/>'

Fast and direct access to these attributes is provided by the ``set()`` and
``get()`` methods of elements:

.. sourcecode:: pycon

    >>> print(root.get("interesting"))
    totally

    >>> root.set("interesting", "somewhat")
    >>> print(root.get("interesting"))
    somewhat

However, a very convenient way of dealing with them is through the dictionary
interface of the ``attrib`` property:

.. sourcecode:: pycon

    >>> attributes = root.attrib

    >>> print(attributes["interesting"])
    somewhat

    >>> print(attributes.get("hello"))
    None

    >>> attributes["hello"] = "Guten Tag"
    >>> print(attributes.get("hello"))
    Guten Tag
    >>> print(root.get("hello"))
    Guten Tag


Elements contain text
---------------------

Elements can contain text:

.. sourcecode:: pycon

    >>> root = etree.Element("root")
    >>> root.text = "TEXT"

    >>> print(root.text)
    TEXT

    >>> etree.tostring(root)
    b'<root>TEXT</root>'

In many XML documents (*data-centric* documents), this is the only place where
text can be found.  It is encapsulated by a leaf tag at the very bottom of the
tree hierarchy.

However, if XML is used for tagged text documents such as (X)HTML, text can
also appear between different elements, right in the middle of the tree:

.. sourcecode:: html

    <html><body>Hello<br/>World</body></html>

Here, the ``<br/>`` tag is surrounded by text.  This is often referred to as
*document-style* or *mixed-content* XML.  Elements support this through their
``tail`` property.  It contains the text that directly follows the element, up
to the next element in the XML tree:

.. sourcecode:: pycon

    >>> html = etree.Element("html")
    >>> body = etree.SubElement(html, "body")
    >>> body.text = "TEXT"

    >>> etree.tostring(html)
    b'<html><body>TEXT</body></html>'

    >>> br = etree.SubElement(body, "br")
    >>> etree.tostring(html)
    b'<html><body>TEXT<br/></body></html>'

    >>> br.tail = "TAIL"
    >>> etree.tostring(html)
    b'<html><body>TEXT<br/>TAIL</body></html>'

The two properties ``.text`` and ``.tail`` are enough to represent any
text content in an XML document.  This way, the ElementTree API does
not require any `special text nodes`_ in addition to the Element
class, that tend to get in the way fairly often (as you might know
from classic DOM_ APIs).

However, there are cases where the tail text also gets in the way.
For example, when you serialise an Element from within the tree, you
do not always want its tail text in the result (although you would
still want the tail text of its children).  For this purpose, the
``tostring()`` function accepts the keyword argument ``with_tail``:

.. sourcecode:: pycon

    >>> etree.tostring(br)
    b'<br/>TAIL'
    >>> etree.tostring(br, with_tail=False) # lxml.etree only!
    b'<br/>'

.. _`special text nodes`: http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-1312295772
.. _DOM: http://www.w3.org/TR/DOM-Level-3-Core/core.html

If you want to read *only* the text, i.e. without any intermediate
tags, you have to recursively concatenate all ``text`` and ``tail``
attributes in the correct order.  Again, the ``tostring()`` function
comes to the rescue, this time using the ``method`` keyword:

.. sourcecode:: pycon

    >>> etree.tostring(html, method="text")
    b'TEXTTAIL'


Using XPath to find text
------------------------

.. _XPath: xpathxslt.html#xpath

Another way to extract the text content of a tree is XPath_, which
also allows you to extract the separate text chunks into a list:

.. sourcecode:: pycon

    >>> print(html.xpath("string()")) # lxml.etree only!
    TEXTTAIL
    >>> print(html.xpath("//text()")) # lxml.etree only!
    ['TEXT', 'TAIL']

If you want to use this more often, you can wrap it in a function:

.. sourcecode:: pycon

    >>> build_text_list = etree.XPath("//text()") # lxml.etree only!
    >>> print(build_text_list(html))
    ['TEXT', 'TAIL']

Note that a string result returned by XPath is a special 'smart'
object that knows about its origins.  You can ask it where it came
from through its ``getparent()`` method, just as you would with
Elements:

.. sourcecode:: pycon

    >>> texts = build_text_list(html)
    >>> print(texts[0])
    TEXT
    >>> parent = texts[0].getparent()
    >>> print(parent.tag)
    body

    >>> print(texts[1])
    TAIL
    >>> print(texts[1].getparent().tag)
    br

You can also find out if it's normal text content or tail text:

.. sourcecode:: pycon

    >>> print(texts[0].is_text)
    True
    >>> print(texts[1].is_text)
    False
    >>> print(texts[1].is_tail)
    True

While this works for the results of the ``text()`` function, lxml will
not tell you the origin of a string value that was constructed by the
XPath functions ``string()`` or ``concat()``:

.. sourcecode:: pycon

    >>> stringify = etree.XPath("string()")
    >>> print(stringify(html))
    TEXTTAIL
    >>> print(stringify(html).getparent())
    None


Tree iteration
--------------

For problems like the above, where you want to recursively traverse the tree
and do something with its elements, tree iteration is a very convenient
solution.  Elements provide a tree iterator for this purpose.  It yields
elements in *document order*, i.e. in the order their tags would appear if you
serialised the tree to XML:

.. sourcecode:: pycon

    >>> root = etree.Element("root")
    >>> etree.SubElement(root, "child").text = "Child 1"
    >>> etree.SubElement(root, "child").text = "Child 2"
    >>> etree.SubElement(root, "another").text = "Child 3"

    >>> print(etree.tostring(root, pretty_print=True))
    <root>
      <child>Child 1</child>
      <child>Child 2</child>
      <another>Child 3</another>
    </root>

    >>> for element in root.iter():
    ...     print("%s - %s" % (element.tag, element.text))
    root - None
    child - Child 1
    child - Child 2
    another - Child 3

If you know you are only interested in a single tag, you can pass its name to
``iter()`` to have it filter for you:

.. sourcecode:: pycon

    >>> for element in root.iter("child"):
    ...     print("%s - %s" % (element.tag, element.text))
    child - Child 1
    child - Child 2

By default, iteration yields all nodes in the tree, including
ProcessingInstructions, Comments and Entity instances.  If you want to
make sure only Element objects are returned, you can pass the
``Element`` factory as tag parameter:

.. sourcecode:: pycon

    >>> root.append(etree.Entity("#234"))
    >>> root.append(etree.Comment("some comment"))

    >>> for element in root.iter():
    ...     if isinstance(element.tag, basestring):
    ...         print("%s - %s" % (element.tag, element.text))
    ...     else:
    ...         print("SPECIAL: %s - %s" % (element, element.text))
    root - None
    child - Child 1
    child - Child 2
    another - Child 3
    SPECIAL: &#234; - &#234;
    SPECIAL: <!--some comment--> - some comment

    >>> for element in root.iter(tag=etree.Element):
    ...     print("%s - %s" % (element.tag, element.text))
    root - None
    child - Child 1
    child - Child 2
    another - Child 3

    >>> for element in root.iter(tag=etree.Entity):
    ...     print(element.text)
    &#234;

In lxml.etree, elements provide `further iterators`_ for all directions in the
tree: children, parents (or rather ancestors) and siblings.

.. _`further iterators`: api.html#iteration


Serialisation
-------------

Serialisation commonly uses the ``tostring()`` function that returns a
string, or the ``ElementTree.write()`` method that writes to a file, a
file-like object, or a URL (via FTP PUT or HTTP POST).  Both calls accept
the same keyword arguments like ``pretty_print`` for formatted output
or ``encoding`` to select a specific output encoding other than plain
ASCII:

.. sourcecode:: pycon

   >>> root = etree.XML('<root><a><b/></a></root>')

   >>> etree.tostring(root)
   b'<root><a><b/></a></root>'

   >>> print(etree.tostring(root, xml_declaration=True))
   <?xml version='1.0' encoding='ASCII'?>
   <root><a><b/></a></root>

   >>> print(etree.tostring(root, encoding='iso-8859-1'))
   <?xml version='1.0' encoding='iso-8859-1'?>
   <root><a><b/></a></root>

   >>> print(etree.tostring(root, pretty_print=True))
   <root>
     <a>
       <b/>
     </a>
   </root>

Note that pretty printing appends a newline at the end.

Since lxml 2.0 (and ElementTree 1.3), the serialisation functions can
do more than XML serialisation.  You can serialise to HTML or extract
the text content by passing the ``method`` keyword:

.. sourcecode:: pycon

   >>> root = etree.XML(
   ...    '<html><head/><body><p>Hello<br/>World</p></body></html>')

   >>> etree.tostring(root) # default: method = 'xml'
   b'<html><head/><body><p>Hello<br/>World</p></body></html>'

   >>> etree.tostring(root, method='xml') # same as above
   b'<html><head/><body><p>Hello<br/>World</p></body></html>'

   >>> etree.tostring(root, method='html')
   b'<html><head></head><body><p>Hello<br>World</p></body></html>'

   >>> print(etree.tostring(root, method='html', pretty_print=True))
   <html>
   <head></head>
   <body><p>Hello<br>World</p></body>
   </html>

   >>> etree.tostring(root, method='text')
   b'HelloWorld'

As for XML serialisation, the default encoding for plain text
serialisation is ASCII:

.. sourcecode:: pycon

   >>> br = root.find('.//br')
   >>> br.tail = u'W\xf6rld'

   >>> etree.tostring(root, method='text')  # doctest: +ELLIPSIS
   Traceback (most recent call last):
     ...
   UnicodeEncodeError: 'ascii' codec can't encode character u'\xf6' ...

   >>> etree.tostring(root, method='text', encoding="UTF-8")
   b'HelloW\xc3\xb6rld'

Here, serialising to a Python unicode string instead of a byte string
might become handy.  Just pass the ``unicode`` type as encoding:

.. sourcecode:: pycon

   >>> etree.tostring(root, encoding=unicode, method='text')
   u'HelloW\xf6rld'

The W3C has a good `article about the Unicode character set and
character encodings`_.

.. _`article about the Unicode character set and character encodings`: http://www.w3.org/International/tutorials/tutorial-char-enc/


The ElementTree class
=====================

An ``ElementTree`` is mainly a document wrapper around a tree with a
root node.  It provides a couple of methods for parsing, serialisation
and general document handling.  One of the bigger differences is that
it serialises as a complete document, as opposed to a single
``Element``.  This includes top-level processing instructions and
comments, as well as a DOCTYPE and other DTD content in the document:

.. sourcecode:: pycon

    >>> tree = etree.parse(StringIO('''\
    ... <?xml version="1.0"?>
    ... <!DOCTYPE root SYSTEM "test" [ <!ENTITY tasty "eggs"> ]>
    ... <root>
    ...   <a>&tasty;</a>
    ... </root>
    ... '''))

    >>> print(tree.docinfo.doctype)
    <!DOCTYPE root SYSTEM "test">

    >>> # lxml 1.3.4 and later
    >>> print(etree.tostring(tree))
    <!DOCTYPE root SYSTEM "test" [
    <!ENTITY tasty "eggs">
    ]>
    <root>
      <a>eggs</a>
    </root>

    >>> # lxml 1.3.4 and later
    >>> print(etree.tostring(etree.ElementTree(tree.getroot())))
    <!DOCTYPE root SYSTEM "test" [
    <!ENTITY tasty "eggs">
    ]>
    <root>
      <a>eggs</a>
    </root>

    >>> # ElementTree and lxml <= 1.3.3
    >>> print(etree.tostring(tree.getroot()))
    <root>
      <a>eggs</a>
    </root>

Note that this has changed in lxml 1.3.4 to match the behaviour of
lxml 2.0.  Before, the examples were serialised without DTD content,
which made lxml loose DTD information in an input-output cycle.


Parsing from strings and files
==============================

``lxml.etree`` supports parsing XML in a number of ways and from all
important sources, namely strings, files, URLs (http/ftp) and
file-like objects.  The main parse functions are ``fromstring()`` and
``parse()``, both called with the source as first argument.  By
default, they use the standard parser, but you can always pass a
different parser as second argument.


The fromstring() function
-------------------------

The ``fromstring()`` function is the easiest way to parse a string:

.. sourcecode:: pycon

    >>> some_xml_data = "<root>data</root>"

    >>> root = etree.fromstring(some_xml_data)
    >>> print(root.tag)
    root
    >>> etree.tostring(root)
    b'<root>data</root>'


The XML() function
------------------

The ``XML()`` function behaves like the ``fromstring()`` function, but is
commonly used to write XML literals right into the source:

.. sourcecode:: pycon

    >>> root = etree.XML("<root>data</root>")
    >>> print(root.tag)
    root
    >>> etree.tostring(root)
    b'<root>data</root>'


The parse() function
--------------------

The ``parse()`` function is used to parse from files and file-like objects:

.. sourcecode:: pycon

    >>> some_file_like = StringIO("<root>data</root>")

    >>> tree = etree.parse(some_file_like)

    >>> etree.tostring(tree)
    b'<root>data</root>'

Note that ``parse()`` returns an ElementTree object, not an Element object as
the string parser functions:

.. sourcecode:: pycon

    >>> root = tree.getroot()
    >>> print(root.tag)
    root
    >>> etree.tostring(root)
    b'<root>data</root>'

The reasoning behind this difference is that ``parse()`` returns a
complete document from a file, while the string parsing functions are
commonly used to parse XML fragments.

The ``parse()`` function supports any of the following sources:

* an open file object

* a file-like object that has a ``.read(byte_count)`` method returning
  a byte string on each call

* a filename string

* an HTTP or FTP URL string

Note that passing a filename or URL is usually faster than passing an
open file.


Parser objects
--------------

By default, ``lxml.etree`` uses a standard parser with a default setup.  If
you want to configure the parser, you can create a you instance:

.. sourcecode:: pycon

    >>> parser = etree.XMLParser(remove_blank_text=True) # lxml.etree only!

This creates a parser that removes empty text between tags while parsing,
which can reduce the size of the tree and avoid dangling tail text if you know
that whitespace-only content is not meaningful for your data.  An example:

.. sourcecode:: pycon

    >>> root = etree.XML("<root>  <a/>   <b>  </b>     </root>", parser)

    >>> etree.tostring(root)
    b'<root><a/><b>  </b></root>'

Note that the whitespace content inside the ``<b>`` tag was not removed, as
content at leaf elements tends to be data content (even if blank).  You can
easily remove it in an additional step by traversing the tree:

.. sourcecode:: pycon

    >>> for element in root.iter("*"):
    ...     if element.text is not None and not element.text.strip():
    ...         element.text = None

    >>> etree.tostring(root)
    b'<root><a/><b/></root>'

See ``help(etree.XMLParser)`` to find out about the available parser options.


Incremental parsing
-------------------

``lxml.etree`` provides two ways for incremental step-by-step parsing.  One is
through file-like objects, where it calls the ``read()`` method repeatedly.
This is best used where the data arrives from a source like ``urllib`` or any
other file-like object that can provide data on request.  Note that the parser
will block and wait until data becomes available in this case:

.. sourcecode:: pycon

    >>> class DataSource:
    ...     data = [ b"<roo", b"t><", b"a/", b"><", b"/root>" ]
    ...     def read(self, requested_size):
    ...         try:
    ...             return self.data.pop(0)
    ...         except IndexError:
    ...             return b''

    >>> tree = etree.parse(DataSource())

    >>> etree.tostring(tree)
    b'<root><a/></root>'

The second way is through a feed parser interface, given by the ``feed(data)``
and ``close()`` methods:

.. sourcecode:: pycon

    >>> parser = etree.XMLParser()

    >>> parser.feed("<roo")
    >>> parser.feed("t><")
    >>> parser.feed("a/")
    >>> parser.feed("><")
    >>> parser.feed("/root>")

    >>> root = parser.close()

    >>> etree.tostring(root)
    b'<root><a/></root>'

Here, you can interrupt the parsing process at any time and continue it later
on with another call to the ``feed()`` method.  This comes in handy if you
want to avoid blocking calls to the parser, e.g. in frameworks like Twisted,
or whenever data comes in slowly or in chunks and you want to do other things
while waiting for the next chunk.

After calling the ``close()`` method (or when an exception was raised
by the parser), you can reuse the parser by calling its ``feed()``
method again:

.. sourcecode:: pycon

    >>> parser.feed("<root/>")
    >>> root = parser.close()
    >>> etree.tostring(root)
    b'<root/>'


Event-driven parsing
--------------------

Sometimes, all you need from a document is a small fraction somewhere deep
inside the tree, so parsing the whole tree into memory, traversing it and
dropping it can be too much overhead.  ``lxml.etree`` supports this use case
with two event-driven parser interfaces, one that generates parser events
while building the tree (``iterparse``), and one that does not build the tree
at all, and instead calls feedback methods on a target object in a SAX-like
fashion.

Here is a simple ``iterparse()`` example:

.. sourcecode:: pycon

    >>> some_file_like = StringIO("<root><a>data</a></root>")

    >>> for event, element in etree.iterparse(some_file_like):
    ...     print("%s, %4s, %s" % (event, element.tag, element.text))
    end,    a, data
    end, root, None

By default, ``iterparse()`` only generates events when it is done parsing an
element, but you can control this through the ``events`` keyword argument:

.. sourcecode:: pycon

    >>> some_file_like = StringIO("<root><a>data</a></root>")

    >>> for event, element in etree.iterparse(some_file_like,
    ...                                       events=("start", "end")):
    ...     print("%5s, %4s, %s" % (event, element.tag, element.text))
    start, root, None
    start,    a, data
      end,    a, data
      end, root, None

Note that the text, tail and children of an Element are not necessarily there
yet when receiving the ``start`` event.  Only the ``end`` event guarantees
that the Element has been parsed completely.

It also allows to ``.clear()`` or modify the content of an Element to
save memory. So if you parse a large tree and you want to keep memory
usage small, you should clean up parts of the tree that you no longer
need:

.. sourcecode:: pycon

    >>> some_file_like = StringIO(
    ...     "<root><a><b>data</b></a><a><b/></a></root>")

    >>> for event, element in etree.iterparse(some_file_like):
    ...     if element.tag == 'b':
    ...         print(element.text)
    ...     elif element.tag == 'a':
    ...         print("** cleaning up the subtree")
    ...         element.clear()
    data
    ** cleaning up the subtree
    None
    ** cleaning up the subtree

If memory is a real bottleneck, or if building the tree is not desired at all,
the target parser interface of ``lxml.etree`` can be used.  It creates
SAX-like events by calling the methods of a target object.  By implementing
some or all of these methods, you can control which events are generated:

.. sourcecode:: pycon

    >>> class ParserTarget:
    ...     events = []
    ...     close_count = 0
    ...     def start(self, tag, attrib):
    ...         self.events.append(("start", tag, attrib))
    ...     def close(self):
    ...         events, self.events = self.events, []
    ...         self.close_count += 1
    ...         return events

    >>> parser_target = ParserTarget()

    >>> parser = etree.XMLParser(target=parser_target)
    >>> events = etree.fromstring('<root test="true"/>', parser)

    >>> print(parser_target.close_count)
    1

    >>> for event in events:
    ...     print('event: %s - tag: %s' % (event[0], event[1]))
    ...     for attr, value in event[2].items():
    ...         print(' * %s = %s' % (attr, value))
    event: start - tag: root
     * test = true

You can reuse the parser and its target as often as you like, so you
should take care that the ``.close()`` methods really resets the
target to a usable state (also in the case of an error!).

.. sourcecode:: pycon

    >>> events = etree.fromstring('<root test="true"/>', parser)
    >>> print(parser_target.close_count)
    2
    >>> events = etree.fromstring('<root test="true"/>', parser)
    >>> print(parser_target.close_count)
    3
    >>> events = etree.fromstring('<root test="true"/>', parser)
    >>> print(parser_target.close_count)
    4

    >>> for event in events:
    ...     print('event: %s - tag: %s' % (event[0], event[1]))
    ...     for attr, value in event[2].items():
    ...         print(' * %s = %s' % (attr, value))
    event: start - tag: root
     * test = true


Namespaces
==========

The ElementTree API avoids `namespace prefixes`_ wherever possible and deploys
the real namespaces instead:

.. sourcecode:: pycon

    >>> xhtml = etree.Element("{http://www.w3.org/1999/xhtml}html")
    >>> body = etree.SubElement(xhtml, "{http://www.w3.org/1999/xhtml}body")
    >>> body.text = "Hello World"

    >>> print(etree.tostring(xhtml, pretty_print=True))
    <html:html xmlns:html="http://www.w3.org/1999/xhtml">
      <html:body>Hello World</html:body>
    </html:html>

.. _`namespace prefixes`: http://www.w3.org/TR/xml-names/#ns-qualnames

The notation that ElementTree uses was originally brought up by `James
Clark`_.  It has the major advantage of providing a universally
qualified name for a tag, regardless of any prefixes that may or may
not have been used or defined in a document.  By moving the
indirection of prefixes out of the way, it makes namespace aware code
much clearer and safer.

.. _`James Clark`: http://www.jclark.com/xml/xmlns.htm

As you can see from the example, prefixes only become important when
you serialise the result.  However, the above code looks somewhat
verbose due to the lengthy namespace names.  And retyping or copying a
string over and over again is error prone.  It is therefore common
practice to store a namespace URI in a global variable.  To adapt the
namespace prefixes for serialisation, you can also pass a mapping to
the Element factory function, e.g. to define the default namespace:

.. sourcecode:: pycon

    >>> XHTML_NAMESPACE = "http://www.w3.org/1999/xhtml"
    >>> XHTML = "{%s}" % XHTML_NAMESPACE

    >>> NSMAP = {None : XHTML_NAMESPACE} # the default namespace (no prefix)

    >>> xhtml = etree.Element(XHTML + "html", nsmap=NSMAP) # lxml only!
    >>> body = etree.SubElement(xhtml, XHTML + "body")
    >>> body.text = "Hello World"

    >>> print(etree.tostring(xhtml, pretty_print=True))
    <html xmlns="http://www.w3.org/1999/xhtml">
      <body>Hello World</body>
    </html>

lxml.etree allows you to look up the current namespaces defined for a
node through the ``.nsmap`` property:

.. sourcecode:: pycon

    >>> xhtml.nsmap
    {None: 'http://www.w3.org/1999/xhtml'}

Note, however, that this includes all prefixes known in the context of
an Element, not only those that it defines itself.

.. sourcecode:: pycon

    >>> root = etree.Element('root', nsmap={'a': 'http://a.b/c'})
    >>> child = etree.SubElement(root, 'child',
    ...                          nsmap={'b': 'http://b.c/d'})
    >>> len(root.nsmap)
    1
    >>> len(child.nsmap)
    2
    >>> child.nsmap['a']
    'http://a.b/c'
    >>> child.nsmap['b']
    'http://b.c/d'

Therefore, modifying the returned dict cannot have any meaningful
impact on the Element.  Any changes to it are ignored.

Namespaces on attributes work alike, but since version 2.3, lxml.etree
will make sure that the attribute uses a prefixed namespace
declaration.  This is because unprefixed attribute names are not
considered being in a namespace by the XML namespace specification
(`section 6.2`_), so they may end up loosing their namespace on a
serialise-parse roundtrip, even if they appear in a namespaced
element.

.. sourcecode:: pycon

    >>> body.set(XHTML + "bgcolor", "#CCFFAA")

    >>> print(etree.tostring(xhtml, pretty_print=True))
    <html xmlns="http://www.w3.org/1999/xhtml">
      <body xmlns:html="http://www.w3.org/1999/xhtml" html:bgcolor="#CCFFAA">Hello World</body>
    </html>

    >>> print(body.get("bgcolor"))
    None
    >>> body.get(XHTML + "bgcolor")
    '#CCFFAA'

.. _`section 6.2`: http://www.w3.org/TR/2009/REC-xml-names-20091208/#defaulting

You can also use XPath with fully qualified names:

.. sourcecode:: pycon

    >>> find_xhtml_body = etree.ETXPath(      # lxml only !
    ...     "//{%s}body" % XHTML_NAMESPACE)
    >>> results = find_xhtml_body(xhtml)

    >>> print(results[0].tag)
    {http://www.w3.org/1999/xhtml}body


The E-factory
=============

The ``E-factory`` provides a simple and compact syntax for generating XML and
HTML:

.. sourcecode:: pycon

    >>> from lxml.builder import E

    >>> def CLASS(*args): # class is a reserved word in Python
    ...     return {"class":' '.join(args)}

    >>> html = page = (
    ...   E.html(       # create an Element called "html"
    ...     E.head(
    ...       E.title("This is a sample document")
    ...     ),
    ...     E.body(
    ...       E.h1("Hello!", CLASS("title")),
    ...       E.p("This is a paragraph with ", E.b("bold"), " text in it!"),
    ...       E.p("This is another paragraph, with a", "\n      ",
    ...         E.a("link", href="http://www.python.org"), "."),
    ...       E.p("Here are some reservered characters: <spam&egg>."),
    ...       etree.XML("<p>And finally an embedded XHTML fragment.</p>"),
    ...     )
    ...   )
    ... )

    >>> print(etree.tostring(page, pretty_print=True))
    <html>
      <head>
        <title>This is a sample document</title>
      </head>
      <body>
        <h1 class="title">Hello!</h1>
        <p>This is a paragraph with <b>bold</b> text in it!</p>
        <p>This is another paragraph, with a
          <a href="http://www.python.org">link</a>.</p>
        <p>Here are some reservered characters: &lt;spam&amp;egg&gt;.</p>
        <p>And finally an embedded XHTML fragment.</p>
      </body>
    </html>

The Element creation based on attribute access makes it easy to build up a
simple vocabulary for an XML language:

.. sourcecode:: pycon

    >>> from lxml.builder import ElementMaker # lxml only !

    >>> E = ElementMaker(namespace="http://my.de/fault/namespace",
    ...                  nsmap={'p' : "http://my.de/fault/namespace"})

    >>> DOC = E.doc
    >>> TITLE = E.title
    >>> SECTION = E.section
    >>> PAR = E.par

    >>> my_doc = DOC(
    ...   TITLE("The dog and the hog"),
    ...   SECTION(
    ...     TITLE("The dog"),
    ...     PAR("Once upon a time, ..."),
    ...     PAR("And then ...")
    ...   ),
    ...   SECTION(
    ...     TITLE("The hog"),
    ...     PAR("Sooner or later ...")
    ...   )
    ... )

    >>> print(etree.tostring(my_doc, pretty_print=True))
    <p:doc xmlns:p="http://my.de/fault/namespace">
      <p:title>The dog and the hog</p:title>
      <p:section>
        <p:title>The dog</p:title>
        <p:par>Once upon a time, ...</p:par>
        <p:par>And then ...</p:par>
      </p:section>
      <p:section>
        <p:title>The hog</p:title>
        <p:par>Sooner or later ...</p:par>
      </p:section>
    </p:doc>

One such example is the module ``lxml.html.builder``, which provides a
vocabulary for HTML.


ElementPath
===========

The ElementTree library comes with a simple XPath-like path language
called ElementPath_.  The main difference is that you can use the
``{namespace}tag`` notation in ElementPath expressions.  However,
advanced features like value comparison and functions are not
available.

.. _ElementPath: http://effbot.org/zone/element-xpath.htm
.. _`full XPath implementation`: xpathxslt.html#xpath

In addition to a `full XPath implementation`_, lxml.etree supports the
ElementPath language in the same way ElementTree does, even using
(almost) the same implementation.  The API provides four methods here
that you can find on Elements and ElementTrees:

* ``iterfind()`` iterates over all Elements that match the path
  expression

* ``findall()`` returns a list of matching Elements

* ``find()`` efficiently returns only the first match

* ``findtext()`` returns the ``.text`` content of the first match

Here are some examples:

.. sourcecode:: pycon

    >>> root = etree.XML("<root><a x='123'>aText<b/><c/><b/></a></root>")

Find a child of an Element:

.. sourcecode:: pycon

    >>> print(root.find("b"))
    None
    >>> print(root.find("a").tag)
    a

Find an Element anywhere in the tree:

.. sourcecode:: pycon

    >>> print(root.find(".//b").tag)
    b
    >>> [ b.tag for b in root.iterfind(".//b") ]
    ['b', 'b']

Find Elements with a certain attribute:

.. sourcecode:: pycon

    >>> print(root.findall(".//a[@x]")[0].tag)
    a
    >>> print(root.findall(".//a[@y]"))
    []
